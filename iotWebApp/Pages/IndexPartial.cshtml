@using Microsoft.AspNetCore.Identity
@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager


@if (SignInManager.IsSignedIn(User))
{
       


    <div style="grid-template-columns: 50% 50%;" id="deviceContainer">
        
    </div>

    <br />
    <br />
   

    </div>
    <script>
            async function getData(){
                const result = await fetch('https://localhost:44318/Devices/GetDevices')
                .then((response) =>  
                    response.text()
                    );
        
                const deviceContainer = document.getElementById("deviceContainer")
                const arrayOfDevices = JSON.parse(result);
                for (let i = 0; i < arrayOfDevices.length; i++) {
         
                 if(arrayOfDevices[i]["userName"]=='@User.Identity.Name')
                 {


                     const deviceTypeValues = arrayOfDevices[i]["deviceType"].split("__");
                     const idDevice = arrayOfDevices[i]["id"]
                     console.log(deviceTypeValues[0])
                     if(deviceTypeValues[0]=="therm"){
                         const newDiv = document.createElement("div");
                         newDiv.className="neumorphicButton";
                         newDiv.style = "font-size: 20px;font-weight:bold; width:300";
                         const newText = document.createElement("div");
                         newText.style = "margin-top:10px; font-size:19px;";
                         newText.innerHTML = deviceTypeValues[1];
                         newDiv.appendChild(newText);
                         const newText1 = document.createElement("div");
                         
                         newText1.id = idDevice+'';
                         newDiv.appendChild(newText1);
                         deviceContainer.appendChild(newDiv);
                         const newDiv2 = document.createElement("div");
                         newDiv2.style = "display:flex;align-content:center;align-items:center;margin-left:35%;margin-top:10%;font-size: 20px;font-weight:bold;"
                         const newDivRound = document.createElement("div");
                         newDivRound.className = "neumorphicSmallRoundButton";
                         newDivRound.innerHTML = "-";
                         newDiv2.appendChild(newDivRound);
                         const newDivRound2 = document.createElement("div");
                         newDivRound2.className = "neumorphicSmallRoundButton";
                         newDivRound.addEventListener("click", function() {
                             const val = parseInt(document.getElementById(idDevice+'').innerHTML)-1
                             document.getElementById(idDevice + '').innerHTML = val
                             firebase.database().ref('/devices/' + idDevice).set({
                                value: val,
                                device_type:deviceTypeValues[0] 
                              });
                            });
                         newDivRound2.innerHTML = "+";
                         newDiv2.appendChild(newDivRound2);
                         newDiv.appendChild(newDiv2);
                         newDivRound2.addEventListener("click", function() {
                             const val = parseInt(document.getElementById(idDevice+'').innerHTML)+1
                             document.getElementById(idDevice + '').innerHTML = val
                             firebase.database().ref('/devices/' + idDevice).set({
                                value: val,
                                device_type:deviceTypeValues[0] 
                              });
                            });

                         var starCountRef = firebase.database().ref('/devices/' + idDevice);
                            starCountRef.on('value', (snapshot) => {
                              const data = snapshot.val();
                              document.getElementById(idDevice + '').innerHTML = data.value
                            });
                     }


                     if(deviceTypeValues[0]=="light"){
                         console.log("light")
                         const newDiv = document.createElement("div");
                         newDiv.className="neumorphicButton";
                         newDiv.style = "font-size: 20px;font-weight:bold; width:300";
                         const newText = document.createElement("div");
                         newText.style = "margin-top:10px; font-size:19px;";
                         newText.innerHTML = deviceTypeValues[1];
                         newDiv.appendChild(newText);
                         deviceContainer.appendChild(newDiv);
                         const newDiv2 = document.createElement("div");
                         newDiv2.style = "flex: 1 auto;"
                         const labl = document.createElement("label");
                         labl.className = "switch";
                         labl.style = "margin-top:80px;";
                         const input = document.createElement("input");
                         input.type = "checkbox";
                         input.addEventListener("click", function() {
                             if(input.checked){
                                 firebase.database().ref('/devices/' + idDevice).set({
                                    value: 1,
                                    device_type:deviceTypeValues[0] 
                                  });
                             }
                             else{
                                 firebase.database().ref('/devices/' + idDevice).set({
                                    value: 0,
                                    device_type:deviceTypeValues[0] 
                                  });
                             }
                            });
                         const span = document.createElement("span");
                         span.className = "slider round";
                         labl.appendChild(input);
                         labl.appendChild(span);
                         newDiv2.appendChild(labl)
                         newDiv.appendChild(newDiv2)
                         

                     }
                 }
                }
                
            } 
            getData();
            function setData(){
            fetch(`https://localhost:44318/Devices/AddDeviceDB?name=@User.Identity.Name&type=thermo__BedRoom&url=12`,{
                mode:'no-cors',
                })
                .then((response) => response.text())
                .catch((error) => {
                    
                })
                .then((body) => {
                    console.log(body)
                });
                getData();

            }

        </script>
 

}
else
{
    
    <canvas id="c" style="width:100%; height:100%"></canvas>

}
<script>
			
function main() {
  const canvas = document.querySelector('#c');
  const renderer = new THREE.WebGLRenderer({canvas});

  const fov = 60;
  const aspect = 2;  // the canvas default
  const near = 0.4;
  const far = 200;
  const camera = new THREE.PerspectiveCamera(fov, aspect, near, far);
  camera.position.set(10, 200, 200);

  const controls = new THREE.OrbitControls(camera, canvas);
  controls.target.set(0, 10, 0);
  controls.update();

  const scene = new THREE.Scene();
  scene.background = new THREE.Color('pink');

  {
    const planeSize = 0;

    const loader = new THREE.TextureLoader();
    const texture = loader.load('https://threejsfundamentals.org/threejs/resources/images/checker.png');
    texture.wrapS = THREE.RepeatWrapping;
    texture.wrapT = THREE.RepeatWrapping;
    texture.magFilter = THREE.NearestFilter;
    const repeats = planeSize / 2;
    texture.repeat.set(repeats, repeats);

    const planeGeo = new THREE.PlaneGeometry(planeSize, planeSize);
    const planeMat = new THREE.MeshPhongMaterial({
      map: texture,
      side: THREE.DoubleSide,
    });
    const mesh = new THREE.Mesh(planeGeo, planeMat);
    mesh.rotation.x = Math.PI * -.5;
    scene.add(mesh);
  }

  {
    const skyColor = 0xB1E1FF;  // light blue
    const groundColor = 0xB97A20;  // brownish orange
    const intensity = 1;
    const light = new THREE.HemisphereLight(skyColor, groundColor, intensity);
    scene.add(light);
  }

  {
    const color = 0xFFFFFF;
    const intensity = 1;
    const light = new THREE.DirectionalLight(color, intensity);
    light.position.set(5, 10, 2);
    scene.add(light);
    scene.add(light.target);
  }

  function frameArea(sizeToFitOnScreen, boxSize, boxCenter, camera) {
    const halfSizeToFitOnScreen = sizeToFitOnScreen * 1;
    const halfFovY = THREE.MathUtils.degToRad(camera.fov * .5);
    const distance = halfSizeToFitOnScreen / Math.tan(halfFovY);
    // compute a unit vector that points in the direction the camera is now
    // in the xz plane from the center of the box
    const direction = (new THREE.Vector3())
        .subVectors(camera.position, boxCenter)
        .multiply(new THREE.Vector3(1, 0, 1))
        .normalize();

    // move the camera to a position distance units way from the center
    // in whatever direction the camera was from the center already
    camera.position.copy(direction.multiplyScalar(distance).add(boxCenter));

    // pick some near and far values for the frustum that
    // will contain the box.
    camera.near = boxSize / 100;
    camera.far = boxSize * 100;

    camera.updateProjectionMatrix();

    // point the camera to look at the center of the box
    camera.lookAt(boxCenter.x, boxCenter.y, boxCenter.z);
  }

  {
    const gltfLoader = new THREE.GLTFLoader();
    gltfLoader.load('https://github.com/vinaysingh8866/ChaliceBlog/blob/master/iot.glb?raw=true', (gltf) => {
      const root = gltf.scene;
      scene.add(root);
      root.rotation.x= 80
      const clock = new THREE.Clock()
      const tick = () =>{
          const elapsedTime = clock.getElapsedTime()

          root.rotation.y = .5*elapsedTime
          renderer.render(scene,camera)
          window.requestAnimationFrame(tick)

      }
      tick()
      // compute the box that contains all the stuff
      // from root and below
      const box = new THREE.Box3().setFromObject(root);

      const boxSize = box.getSize(new THREE.Vector3()).length();
      const boxCenter = box.getCenter(new THREE.Vector3());

      // set the camera to frame the box
      frameArea(boxSize * 0.5, boxSize, boxCenter, camera);

      // update the Trackball controls to handle the new size
      controls.maxDistance = boxSize * 10;
      controls.target.copy(boxCenter);
      controls.update();
    });
  }

  function resizeRendererToDisplaySize(renderer) {
    const canvas = renderer.domElement;
    const width = canvas.clientWidth;
    const height = canvas.clientHeight;
    const needResize = canvas.width !== width || canvas.height !== height;
    if (needResize) {
      renderer.setSize(width, height, false);
    }
    return needResize;
  }





  function render() {
    if (resizeRendererToDisplaySize(renderer)) {
      const canvas = renderer.domElement;
      camera.aspect = canvas.clientWidth / canvas.clientHeight;
      camera.updateProjectionMatrix();
    }

    renderer.render(scene, camera);

    requestAnimationFrame(render);
  }

  requestAnimationFrame(render);

  

}

main();
		</script>
